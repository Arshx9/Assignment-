{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b449c4c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Agenda for today (3 hrs) and tomorrow (3 hrs):\n",
    "# Intro to data structures\n",
    "# Strings\n",
    "# Lists\n",
    "# Tuples\n",
    "# Sets\n",
    "# Dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d40c720d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What is Data Structure?\n",
    "# A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently.\n",
    "# Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks.\n",
    "# Examples: Arrays, Linked Lists, Stacks, Queues, Trees, Graphs, Hash Tables, etc.\n",
    "# In Python, we have built-in data structures like Lists, Tuples, Sets, and Dictionaries.\n",
    "# We will cover these built-in data structures in detail.\n",
    "\n",
    "# Some practical applications of each Python data structure:\n",
    "# Lists: Used for storing collections of items, such as a list of student names or a list of tasks to be completed.\n",
    "# Tuples: Used for storing fixed collections of items, such as coordinates (x, y) or RGB color values.\n",
    "# Sets: Used for storing unique items, such as a set of unique words in a document or a set of unique user IDs.\n",
    "# Dictionaries: Used for storing key-value pairs, such as a phone book (name -> phone number) or a configuration settings (setting name -> setting value)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "295f2560",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!\n",
      "\n",
      "Hello, World!\n",
      "\n",
      "Hello,\n",
      "World!\n"
     ]
    }
   ],
   "source": [
    "# Let's start with Strings\n",
    "\n",
    "# What is a String?\n",
    "# A string is a sequence of characters. In Python, strings are immutable, meaning they cannot be changed after they are created.\n",
    "# Strings can be created using single quotes (' '), double quotes (\" \"), or triple quotes (''' ''' or \"\"\" \"\"\").\n",
    "# Example of creating strings\n",
    "single_quote_str = 'Hello, World!'\n",
    "double_quote_str = \"Hello, World!\"\n",
    "triple_quote_str = '''Hello,\n",
    "World!'''\n",
    "print(single_quote_str)\n",
    "\n",
    "print()\n",
    "print(double_quote_str)\n",
    "\n",
    "print()\n",
    "print(triple_quote_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "970f034a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Concatenated String: Hello World\n",
      "\n",
      "Repeated String: HelloHelloHello\n",
      "\n",
      "Sliced String: Hello\n",
      "\n",
      "Length of Concatenated String: 11\n",
      "\n",
      "First Character: H\n",
      "Last Character: d\n"
     ]
    }
   ],
   "source": [
    "# Now, let's explore some common string operations and methods\n",
    "# 1. Concatenation\n",
    "str1 = \"Hello\"\n",
    "str2 = \"World\"\n",
    "concatenated_str = str1 + \" \" + str2\n",
    "print(\"Concatenated String:\", concatenated_str)\n",
    "print()\n",
    "\n",
    "# 2. Repetition\n",
    "repeated_str = str1 * 3\n",
    "print(\"Repeated String:\", repeated_str)\n",
    "print()\n",
    "\n",
    "# 3. Slicing\n",
    "sliced_str = concatenated_str[0:5]  # SI=0, EI=(5-1)\n",
    "print(\"Sliced String:\", sliced_str)\n",
    "print()\n",
    "\n",
    "# 4. Length\n",
    "length_of_str = len(concatenated_str)\n",
    "print(\"Length of Concatenated String:\", length_of_str)\n",
    "print()\n",
    "\n",
    "# 5. Indexing\n",
    "first_char = concatenated_str[0]\n",
    "last_char = concatenated_str[-1]\n",
    "print(\"First Character:\", first_char)\n",
    "print(\"Last Character:\", last_char)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "395dfd06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dr. Darshan Ingle\n",
      "D\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'str' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[15], line 6\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(s)\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(s[\u001b[38;5;241m0\u001b[39m])\n\u001b[0;32m----> 6\u001b[0m s[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(s)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'str' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "# Strings are immutable in Python\n",
    "s = \"Dr. Darshan Ingle\"\n",
    "print(s)\n",
    "print(s[0])\n",
    "\n",
    "# s[0] = \"M\" # This will raise an error: TypeError: 'str' object does not support item assignment\n",
    "# print(s) # This line will not be executed due to the error above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4270999a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functions of Strings\n",
    "# Syntax: string_name.function_name()\n",
    "\n",
    "# Lets try to explore all the functions of strings one by one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f15f987e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Username: darshan ingle\n",
      "4393450352\n",
      "Uppercase Username: DARSHAN INGLE\n",
      "4394878640\n"
     ]
    }
   ],
   "source": [
    "# 1. upper(): Converts all characters in the string to uppercase\n",
    "\n",
    "# In banking application, when user enters username in small letters, we can convert it to upper case and then store it in database\n",
    "username = \"darshan ingle\"\n",
    "print(\"Original Username:\", username)\n",
    "print(id(username))\n",
    "\n",
    "uppercase_username = username.upper()\n",
    "print(\"Uppercase Username:\", uppercase_username)\n",
    "print(id(uppercase_username))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3fdebf40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Email: INGLEDARSHAN@GMAIL.COM\n",
      "Lowercase Email: ingledarshan@gmail.com\n"
     ]
    }
   ],
   "source": [
    "# 2. lower(): Converts all characters in the string to lowercase\n",
    "\n",
    "# In e-commerce application, when user enters email id in uppercase letters, we can convert it to lower case and then store it in database\n",
    "email = \"INGLEDARSHAN@GMAIL.COM\"\n",
    "print(\"Original Email:\", email)\n",
    "\n",
    "lowercase_email = email.lower()\n",
    "print(\"Lowercase Email:\", lowercase_email)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6fe7bd07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Name: dArShAn inGLe\n",
      "Title Case Name: Darshan Ingle\n"
     ]
    }
   ],
   "source": [
    "# title(): Converts the first character of each word to uppercase and the rest to lowercase\n",
    "\n",
    "# In a travel booking application, when user enters their name in any format, we can convert it to title case before displaying it on the ticket\n",
    "name = \"dArShAn inGLe\"\n",
    "print(\"Original Name:\", name)\n",
    "title_case_name = name.title()\n",
    "print(\"Title Case Name:\", title_case_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ce1386ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Subject: hello all, we are hosting a birthday party for my kid's 5th birthday on sunday.\n",
      "Capitalized Subject: Hello all, we are hosting a birthday party for my kid's 5th birthday on sunday.\n"
     ]
    }
   ],
   "source": [
    "# 4. capitalize(): Converts the first character of the string to uppercase and the rest to lowercase\n",
    "\n",
    "# In a formal letter application, when user enters the subject line in any format, we can convert it to capitalized case before displaying it on the letter\n",
    "subject = \"hello all, we are hosting a birthday party for my kid's 5th birthday on sunday.\"\n",
    "print(\"Original Subject:\", subject)\n",
    "capitalized_subject = subject.capitalize()\n",
    "print(\"Capitalized Subject:\", capitalized_subject)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f04ce373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original User Name:    Darshan Ingle   \n",
      "Stripped User Name: Darshan Ingle\n"
     ]
    }
   ],
   "source": [
    "# 5. strip(): Removes any leading (spaces at the beginning) and trailing (spaces at the end) characters (space is the default leading character to remove)\n",
    "\n",
    "# In a user registration application, when user enters their name with extra spaces, we can remove those spaces before storing it in database\n",
    "user_name = \"   Darshan Ingle   \"\n",
    "print(\"Original User Name:\", user_name)\n",
    "stripped_user_name = user_name.strip()\n",
    "print(\"Stripped User Name:\", stripped_user_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "16e40c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original User Name:    Darshan Ingle   \n",
      "Left Stripped User Name: Darshan Ingle   \n"
     ]
    }
   ],
   "source": [
    "# 6. lstrip(): Removes any leading (spaces at the beginning) characters (space is the default leading character to remove)\n",
    "\n",
    "# In a user registration application, when user enters their name with extra spaces at the beginning, we can remove those spaces before storing it in database\n",
    "user_name = \"   Darshan Ingle   \"\n",
    "print(\"Original User Name:\", user_name)\n",
    "lstripped_user_name = user_name.lstrip()\n",
    "print(\"Left Stripped User Name:\", lstripped_user_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1cc64459",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original User Name:    Darshan Ingle   \n",
      "Right Stripped User Name:    Darshan Ingle\n"
     ]
    }
   ],
   "source": [
    "# 7. rstrip(): Removes any trailing (spaces at the end) characters (space is the default trailing character to remove)\n",
    "\n",
    "# In a user registration application, when user enters their name with extra spaces at the end, we can remove those spaces before storing it in database\n",
    "user_name = \"   Darshan Ingle   \"\n",
    "print(\"Original User Name:\", user_name)\n",
    "rstripped_user_name = user_name.rstrip()\n",
    "print(\"Right Stripped User Name:\", rstripped_user_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6b9087a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The word 'python' is found at position: -1\n",
      "The word 'python' is not found in the document.\n"
     ]
    }
   ],
   "source": [
    "# 8. find(): Searches the string for a specified value and returns the position of where it was found. Returns -1 if the value is not found. (case-sensitive)\n",
    "\n",
    "# In a document search application, when user searches for a word, we can use find() to locate the position of the word in the document\n",
    "document = \"Python is a great programming language. Python is widely used in data science.\"\n",
    "# word_to_find = \"Python\"\n",
    "# word_to_find = \"great\"\n",
    "word_to_find = \"python\"  # case-sensitive\n",
    "position = document.find(word_to_find)\n",
    "print(f\"The word '{word_to_find}' is found at position:\", position)\n",
    "if position != -1:\n",
    "    print(f\"The word '{word_to_find}' is found in the document.\")\n",
    "else:\n",
    "    print(f\"The word '{word_to_find}' is not found in the document.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "969a208f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Bill: The patient underwent an X-ray and an MRI scan.\n",
      "4409360080\n",
      "Updated Bill: The patient underwent an CT scan and an MRI scan.\n",
      "4409401712\n"
     ]
    }
   ],
   "source": [
    "# 9. replace(old, new): Replaces a specified phrase with another specified phrase\n",
    "\n",
    "# In a healtcare billing application, when there is a change in the name of a medical procedure, we can update the procedure name in all the bills\n",
    "bill = \"The patient underwent an X-ray and an MRI scan.\"\n",
    "print(\"Original Bill:\", bill)\n",
    "print(id(bill))\n",
    "updated_bill = bill.replace(\"X-ray\", \"CT scan\")\n",
    "print(\"Updated Bill:\", updated_bill)\n",
    "print(id(updated_bill))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8aff3d79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Shipment String: item1 item2 item3 item4\n",
      "List of Items in Shipment: ['item1', 'item2', 'item3', 'item4']\n"
     ]
    }
   ],
   "source": [
    "# 10. split(): Splits the string at the specified separator, and returns a list\n",
    "\n",
    "# In logistics application, when we receive a comma-separated list of items in a shipment, we can split the string into a list of individual items\n",
    "# shipment = \"item1,item2,item3,item4\"\n",
    "shipment = \"item1 item2 item3 item4\"\n",
    "print(\"Original Shipment String:\", shipment)\n",
    "# items_list = shipment.split(\",\")\n",
    "items_list = shipment.split(\" \")\n",
    "print(\"List of Items in Shipment:\", items_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f5fa338",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Words List:\n",
      " ['Hello', 'travelers', 'welcome', 'to', 'the', 'Swiss', 'Alps', '.', 'These', 'are', 'the', 'most', 'beautiful', 'mountains', 'in', 'the', 'world', '.']\n",
      "Joined Sentence:\n",
      " Hello travelers welcome to the Swiss Alps . These are the most beautiful mountains in the world .\n"
     ]
    }
   ],
   "source": [
    "# 11. join(): Joins the elements of an iterable (e.g., list, tuple) into a single string, with a specified separator\n",
    "\n",
    "# In a messaging application, when we have a list of words and we want to create a sentence, we can use join() to combine the words into a single string\n",
    "words = [\"Hello\", \"travelers\", \"welcome\", \"to\", \"the\", \"Swiss\", \"Alps\", \".\", \"These\", \"are\", \"the\", \"most\", \"beautiful\", \"mountains\", \"in\", \"the\", \"world\", \".\"]\n",
    "print(\"Original Words List:\\n\", words)\n",
    "sentence = \" \".join(words)\n",
    "print(\"Joined Sentence:\\n\", sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e768350c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Message:\n",
      " This is a sample message. This message is for testing.\n",
      "Count of 'message': 2\n"
     ]
    }
   ],
   "source": [
    "# 12. count(substring): Returns the number of occurrences of a substring in the string\n",
    "\n",
    "# In a content moderation application, we can use count() to find the number of times a specific word appears in a user's message\n",
    "message = \"This is a sample message. This message is for testing.\"\n",
    "print(\"Original Message:\\n\", message)\n",
    "word_count = message.count(\"message\")\n",
    "print(\"Count of 'message':\", word_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e58e6ad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mobile number 919876543210 is from India.\n"
     ]
    }
   ],
   "source": [
    "# 13. startswith(prefix): Returns True if the string starts with the specified prefix, otherwise False\n",
    "\n",
    "# In telecom, mobile numbers starting \"91\" are from India\n",
    "mobile_number = \"919876543210\"\n",
    "# Check if the mobile number starts with \"91\"\n",
    "is_indian_number = mobile_number.startswith(\"91\")\n",
    "if is_indian_number is True:\n",
    "    print(f\"The mobile number {mobile_number} is from India.\")\n",
    "else:\n",
    "    print(f\"The mobile number {mobile_number} is not from India.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "44c22572",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The email address ingledarshan@gmail.com is valid.\n",
      "The resume file darshan_ingle_resume.odf is not valid. Please upload a valid resume file.\n"
     ]
    }
   ],
   "source": [
    "# 14. endswith(suffix): Returns True if the string ends with the specified suffix, otherwise False\n",
    "\n",
    "# In email validation, we can check if an email address ends with a valid domain like \".com\" or \".org\"\n",
    "email = \"ingledarshan@gmail.com\"\n",
    "if email.endswith(\".com\") or email.endswith(\".org\"):\n",
    "    print(f\"The email address {email} is valid.\")\n",
    "else:\n",
    "    print(f\"The email address {email} is not valid.\")\n",
    "\n",
    "    # In job protal application, we can check if a resume file ends with a valid extension like \".pdf\" or \".docx\"\n",
    "resume_file = \"darshan_ingle_resume.odf\"\n",
    "if resume_file.endswith(\".pdf\") or resume_file.endswith(\".docx\"):\n",
    "    print(f\"The resume file {resume_file} is valid. It is sent ahead for further processing.\")\n",
    "else:\n",
    "    print(f\"The resume file {resume_file} is not valid. Please upload a valid resume file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "83ec8397",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The name 'Darshan Ingle' is not valid. It should contain only letters.\n"
     ]
    }
   ],
   "source": [
    "# 15. isalpha(): Returns True if all characters in the string are alphabetic (letters), otherwise False\n",
    "# In a user registration application, we can use isalpha() to validate that the name field contains only letters\n",
    "# name = \"DarshanIngle\"\n",
    "name = \"Darshan Ingle\"\n",
    "if name.isalpha() is True:\n",
    "    print(f\"The name '{name}' is valid.\")\n",
    "else:\n",
    "    print(f\"The name '{name}' is not valid. It should contain only letters.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "02b31cfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The OTP '784345' is valid.\n"
     ]
    }
   ],
   "source": [
    "# 16. isdigit(): Returns True if all characters in the string are digits (0-9), otherwise False\n",
    "\n",
    "# In banking application, we can use isdigit() to validate OTP (One Time Password) entered by user\n",
    "otp = \"784345\"\n",
    "if otp.isdigit() is True:\n",
    "    print(f\"The OTP '{otp}' is valid.\")\n",
    "else:\n",
    "    print(f\"The OTP '{otp}' is not valid. It should contain only digits.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b3fa4146",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The username 'DarshanIngle123' is valid.\n"
     ]
    }
   ],
   "source": [
    "# 17. isalnum(): Returns True if all characters in the string are alphanumeric (letters and numbers), otherwise False\n",
    "\n",
    "# In a user registration application, we can use isalnum() to validate that the username contains only letters and numbers\n",
    "username = \"DarshanIngle123\"\n",
    "# username = \"Darshan Ingle 123\"\n",
    "if username.isalnum() is True:\n",
    "    print(f\"The username '{username}' is valid.\")\n",
    "else:\n",
    "    print(f\"The username '{username}' is not valid. It should contain only letters and numbers.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fb796d74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dear Darshan Ingle, your booking to Swiss Alps on 2023-12-25 is confirmed.\n"
     ]
    }
   ],
   "source": [
    "# 18. format(): Formats specified values in a string\n",
    "\n",
    "# In a travel booking application, we can use format() to create a booking confirmation message with dynamic values like user name, destination, and date\n",
    "user_name = \"Darshan Ingle\"\n",
    "destination = \"Swiss Alps\"\n",
    "date = \"2023-12-25\"\n",
    "confirmation_message = \"Dear {}, your booking to {} on {} is confirmed.\".format(user_name, destination, date)\n",
    "print(confirmation_message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9bcafacc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Code with Tabs:\n",
      " def my_function():\n",
      "\tprint('Hello, World!')\n",
      "Code with Spaces:\n",
      " def my_function():\n",
      "    print('Hello, World!')\n"
     ]
    }
   ],
   "source": [
    "# 19. expandtabs(tabsize): Replaces all tab characters ('\\t') in the string with spaces. The number of spaces is determined by the tabsize parameter (default is 8).\n",
    "\n",
    "# In a text editor application, when displaying code with tab characters, we can use expandtabs() to convert tabs to spaces for better readability\n",
    "code_with_tabs = \"def my_function():\\n\\tprint('Hello, World!')\"\n",
    "print(\"Original Code with Tabs:\\n\", code_with_tabs)\n",
    "code_with_spaces = code_with_tabs.expandtabs(tabsize=4)\n",
    "print(\"Code with Spaces:\\n\", code_with_spaces)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a9b27059",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Text:\n",
      " Hello, World! Welcome to Python programming.\n",
      "Translated Text:\n",
      " Jello, WorldV Welcome to Python programming\n"
     ]
    }
   ],
   "source": [
    "# 20. maketrans(): Creates a translation table for use with the translate() method\n",
    "# Syntax: str.maketrans(x, y, z)\n",
    "# where,\n",
    "# x - string specifying the characters to be replaced\n",
    "# y - string specifying the characters to replace with\n",
    "# z (optional) - string specifying the characters to be deleted\n",
    "\n",
    "# In a text processing application, we can use maketrans() and translate() to replace certain characters in a string\n",
    "text = \"Hello, World! Welcome to Python programming.\"\n",
    "print(\"Original Text:\\n\", text)\n",
    "# Create a translation table to replace 'H' with 'J', 'W' with 'V', and delete '!'\n",
    "translation_table = str.maketrans(\"H!\", \"JV\", \".\")\n",
    "# Translate the text using the translation table\n",
    "translated_text = text.translate(translation_table)\n",
    "print(\"Translated Text:\\n\", translated_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98428362",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Notebook Exercise: iPhone Version Tracker (String Functions)\n",
    "\n",
    "---\n",
    "\n",
    "### **Task 1 – Clean and Inspect the Raw String**\n",
    "\n",
    "```python\n",
    "iphone_version = \"iPhone_15_Pro_Max_V1.0_release\"\n",
    "```\n",
    "\n",
    "**Exercise Objectives:**\n",
    "\n",
    "1. Print the string and count its total characters using `len()`.\n",
    "2. Find the position of `\"Pro\"` using `.find()`.\n",
    "3. Extract `\"15_Pro_Max\"` using slicing.\n",
    "4. Convert the entire string to uppercase and lowercase.\n",
    "\n",
    "*Goal:* Understand inspection and basic string manipulations.\n",
    "\n",
    "---\n",
    "\n",
    "### **Task 2 – Format and Update the Version Name**\n",
    "\n",
    "**Scenario:** The company is about to release a new minor update.\n",
    "\n",
    "**Exercise Objectives:**\n",
    "\n",
    "1. Replace all `_` with spaces for readability using `.replace()`.\n",
    "2. Find `\"V1.0\"` and replace it with `\"V1.1\"`.\n",
    "3. Ensure the updated version string contains `\"V1.1\"` using `\"V1.1\" in ...`.\n",
    "4. Print both old and updated strings side by side.\n",
    "\n",
    "*Goal:* Practice `replace()`, `in`, and string reformatting.\n",
    "\n",
    "---\n",
    "\n",
    "### **Task 3 – Add Regional Code and Convert Style**\n",
    "\n",
    "**Scenario:** Apple is releasing the update specifically for India.\n",
    "\n",
    "**Exercise Objectives:**\n",
    "\n",
    "1. Append region code `_IN` at the end of the string using concatenation.\n",
    "2. Split the string by `_` and convert it to PascalCase format (e.g., `iPhone_15_Pro_Max` → `iPhone15ProMax`).\n",
    "3. Join the components back using `\"\".join()`.\n",
    "\n",
    "*Goal:* Use `split()`, `join()`, and capitalization functions together.\n",
    "\n",
    "---\n",
    "\n",
    "### **Task 4 – Generate a Version Release Log**\n",
    "\n",
    "**Scenario:** The release team needs an announcement message.\n",
    "\n",
    "**Exercise Objectives:**\n",
    "\n",
    "1. Assume today’s date is `\"2025-10-11\"`.\n",
    "2. Use an f-string or `.format()` to create a release message:\n",
    "\n",
    "   ```\n",
    "   \"New version iPhone 15 Pro Max V1.1_IN released on 2025-10-11\"\n",
    "   ```\n",
    "3. Use `.title()` for display formatting and `.count()` to count total words.\n",
    "\n",
    "*Goal:* Combine variables and string formatting functions effectively.\n",
    "\n",
    "---\n",
    "\n",
    "### **Task 5 – Summarize and Extract Core Details**\n",
    "\n",
    "**Scenario:** You now have multiple releases to analyze.\n",
    "\n",
    "```python\n",
    "versions = [\n",
    "    \"iPhone_15_Pro_Max_V1.0_release\",\n",
    "    \"iPhone_15_Pro_Max_V1.1_IN\",\n",
    "    \"iPhone_15_Pro_Max_V1.2_US\",\n",
    "    \"iPhone_15_Pro_Max_V2.0_EU\"\n",
    "]\n",
    "```\n",
    "\n",
    "**Exercise Objectives:**\n",
    "\n",
    "1. Extract only version numbers (`V1.0`, `V1.1`, etc.) from each string using `.split()` and indexing.\n",
    "2. Count how many releases exist per region using `.endswith()`.\n",
    "3. Identify the **latest version** by comparing version numbers.\n",
    "4. Display summary:\n",
    "\n",
    "   ```\n",
    "   Model: iPhone 15 Pro Max\n",
    "   Latest Version: V2.0\n",
    "   Region: EU\n",
    "   Total Versions Released: 4\n",
    "   ```\n",
    "\n",
    "*Goal:* Apply multiple string methods in a connected, real-world use case.\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45d6cb87",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
